import HevaServer from "../main/hevaServer";

const fs = require('fs');
const readline = require('readline');

export const lookupIndexTable = Buffer.from([0xCD, 0x4, 0xAD, 0x0, 0x49, 0x0, 0x82, 0x5, 0xF2, 0x5, 0x1E, 0x3, 0xE4, 0x5, 0x3E, 0x1, 0xE0, 0x2, 0xEF, 0x1, 0x92, 0x4, 0x62, 0x6, 0x9, 0x7, 0xC6, 0x1, 0xC4, 0x4, 0x18, 0x5, 0xED, 0x0, 0x9C, 0x7, 0x85, 0x5, 0x7C, 0x7, 0xBC, 0x5, 0xC6, 0x2, 0xAE, 0x6, 0xBE, 0x4, 0x2C, 0x1, 0x43, 0x4, 0x67, 0x5, 0xA0, 0x7, 0x96, 0x5, 0x45, 0x7, 0xE4, 0x6, 0xA, 0x4, 0x55, 0x0, 0x1, 0x7, 0x5E, 0x5, 0xF, 0x0, 0x60, 0x6, 0x50, 0x3, 0x7, 0x4, 0x26, 0x5, 0x11, 0x1, 0xF3, 0x0, 0x1, 0x6, 0xAB, 0x3, 0x7F, 0x7, 0xFF, 0x7, 0x74, 0x4, 0xE3, 0x7, 0x37, 0x3, 0x99, 0x1, 0x22, 0x4, 0x4C, 0x4, 0x2D, 0x6, 0xA1, 0x2, 0x48, 0x5, 0xCF, 0x1, 0x54, 0x3, 0x1F, 0x2, 0xD, 0x4, 0xD8, 0x1, 0x3F, 0x1, 0xB, 0x6, 0x28, 0x0, 0xB6, 0x4, 0x3D, 0x2, 0xD6, 0x7, 0x2E, 0x0, 0x80, 0x3, 0xB6, 0x5, 0xF5, 0x1, 0x65, 0x2, 0x49, 0x7, 0x10, 0x2, 0x82, 0x3, 0xEE, 0x4, 0x91, 0x0, 0x41, 0x1, 0x3B, 0x4, 0x2D, 0x4, 0xC0, 0x1, 0x93, 0x5, 0x8E, 0x6, 0xF8, 0x6, 0x64, 0x2, 0xEA, 0x7, 0xC1, 0x6, 0x66, 0x2, 0x6C, 0x2, 0x2D, 0x0, 0x66, 0x5, 0xF8, 0x5, 0xBF, 0x6, 0x16, 0x4, 0xFD, 0x0, 0xEA, 0x3, 0xB, 0x3, 0x22, 0x0, 0xED, 0x2, 0xD7, 0x1, 0xC0, 0x4, 0xCF, 0x6, 0xA0, 0x3, 0x94, 0x5, 0x74, 0x3, 0x1E, 0x2, 0xF9, 0x1, 0x47, 0x2, 0x56, 0x2, 0x44, 0x3, 0x4, 0x2, 0xC7, 0x1, 0x11, 0x7, 0xAF, 0x4, 0xD7, 0x6, 0x3B, 0x6, 0xC3, 0x1, 0x41, 0x2, 0xC3, 0x3, 0xEB, 0x7, 0x5D, 0x2, 0xC8, 0x3, 0xC3, 0x0, 0x6A, 0x3, 0x20, 0x7, 0xBE, 0x5, 0x22, 0x6, 0xE8, 0x3, 0x6D, 0x0, 0x41, 0x4, 0x6E, 0x3, 0xD1, 0x5, 0xD8, 0x5, 0x53, 0x4, 0x9F, 0x5, 0xAB, 0x5, 0x66, 0x0, 0x54, 0x7, 0x82, 0x0, 0x30, 0x7, 0x27, 0x6, 0xBF, 0x4, 0x6A, 0x7, 0xA8, 0x0, 0xFF, 0x2, 0x21, 0x6, 0x17, 0x1, 0x89, 0x6, 0xA6, 0x2, 0x60, 0x1, 0xE5, 0x2, 0x52, 0x3, 0x5, 0x0, 0x29, 0x5, 0x3A, 0x7, 0xA6, 0x7, 0xB8, 0x5, 0xBB, 0x3, 0x2D, 0x3, 0xA7, 0x6, 0xDB, 0x3, 0xD4, 0x7, 0x72, 0x7, 0x92, 0x2, 0x1B, 0x7, 0xFA, 0x7, 0x8A, 0x0, 0xA1, 0x5, 0xF7, 0x4, 0xEE, 0x3, 0x31, 0x2, 0x5C, 0x1, 0x6B, 0x0, 0x1, 0x2, 0xC5, 0x4, 0x63, 0x1, 0x24, 0x5, 0x63, 0x5, 0x5D, 0x0, 0x60, 0x7, 0xFC, 0x0, 0x96, 0x1, 0x39, 0x4, 0x89, 0x0, 0xE7, 0x5, 0x27, 0x4, 0xE0, 0x1, 0xC5, 0x2, 0xB7, 0x7, 0x20, 0x2, 0x13, 0x0, 0xE, 0x1, 0x97, 0x2, 0xE4, 0x4, 0x70, 0x4, 0x3, 0x4, 0x20, 0x6, 0x8C, 0x1, 0x4D, 0x5, 0x0, 0x5, 0x62, 0x3, 0x19, 0x6, 0x15, 0x2, 0xEC, 0x0, 0xD7, 0x7, 0x4E, 0x6, 0xCF, 0x0, 0xED, 0x5, 0xAF, 0x3, 0xD0, 0x3, 0x1C, 0x6, 0xE0, 0x5, 0x61, 0x6, 0xED, 0x6, 0x92, 0x3, 0x57, 0x7, 0x4C, 0x0, 0x36, 0x0, 0x36, 0x6, 0x5E, 0x6, 0x52, 0x4, 0x8A, 0x7, 0x90, 0x4, 0x89, 0x7, 0x10, 0x5, 0x5E, 0x4, 0x23, 0x0, 0x67, 0x7, 0xF2, 0x1, 0x50, 0x7, 0x35, 0x5, 0x27, 0x1, 0x9A, 0x0, 0xEE, 0x0, 0x87, 0x0, 0x73, 0x6, 0xC2, 0x1, 0x91, 0x4, 0x3, 0x3, 0x92, 0x6, 0xA5, 0x7, 0xD0, 0x7, 0xDC, 0x2, 0xA6, 0x1, 0x23, 0x7, 0xD4, 0x0, 0x73, 0x7, 0x76, 0x1, 0x40, 0x2, 0x64, 0x3, 0xCC, 0x0, 0x77, 0x6, 0xE0, 0x0, 0x32, 0x0, 0x1E, 0x5, 0xC6, 0x7, 0xBE, 0x0, 0xC2, 0x7, 0xE6, 0x4, 0x42, 0x4, 0xC4, 0x5, 0xB6, 0x7, 0x8E, 0x3, 0xA7, 0x7, 0x19, 0x0, 0xFA, 0x3, 0x99, 0x4, 0x3A, 0x3, 0x8C, 0x4, 0x13, 0x2, 0xE9, 0x5, 0x20, 0x5, 0x5B, 0x1, 0x9B, 0x0, 0xDB, 0x6, 0x5, 0x5, 0x72, 0x0, 0xD7, 0x2, 0xCE, 0x0, 0x4E, 0x2, 0x5D, 0x5, 0x9E, 0x3, 0x64, 0x0, 0x81, 0x0, 0x82, 0x2, 0xF0, 0x6, 0x5F, 0x7, 0x3A, 0x4, 0x9, 0x5, 0x72, 0x4, 0x27, 0x5, 0x2, 0x1, 0x40, 0x4, 0xAA, 0x3, 0xC2, 0x2, 0x49, 0x5, 0xA0, 0x6, 0x61, 0x3, 0x4A, 0x2, 0x80, 0x4, 0x25, 0x2, 0xF4, 0x0, 0xC6, 0x3, 0xB2, 0x0, 0xAD, 0x2, 0x25, 0x0, 0x23, 0x4, 0x65, 0x5, 0x8E, 0x0, 0x1C, 0x4, 0x69, 0x2, 0xD0, 0x1, 0x7D, 0x3, 0xC0, 0x5, 0x4A, 0x7, 0x3D, 0x6, 0x9D, 0x5, 0x3D, 0x3, 0xB7, 0x0, 0x3E, 0x4, 0xFD, 0x4, 0xB5, 0x0, 0xCC, 0x2, 0x9F, 0x0, 0xA9, 0x3, 0xB8, 0x1, 0xFA, 0x0, 0xE4, 0x2, 0x97, 0x4, 0xFB, 0x1, 0x11, 0x3, 0x9C, 0x0, 0x51, 0x7, 0x87, 0x6, 0x3, 0x6, 0x6D, 0x6, 0xA6, 0x5, 0xF7, 0x6, 0xC2, 0x6, 0xD, 0x1, 0xCC, 0x7, 0xC3, 0x6, 0xD3, 0x3, 0x90, 0x0, 0xFD, 0x2, 0xAE, 0x4, 0xF6, 0x7, 0xCE, 0x1, 0xAF, 0x2, 0x35, 0x0, 0x96, 0x7, 0x7E, 0x5, 0x4B, 0x1, 0x51, 0x2, 0x7C, 0x1, 0x30, 0x6, 0xE7, 0x6, 0xCB, 0x2, 0x97, 0x1, 0x7E, 0x4, 0xDE, 0x7, 0xB0, 0x5, 0xC7, 0x0, 0x45, 0x3, 0x61, 0x1, 0x28, 0x5, 0x39, 0x2, 0xD0, 0x6, 0xCD, 0x3, 0x91, 0x3, 0xBF, 0x1, 0xEF, 0x5, 0x45, 0x0, 0xE3, 0x4, 0x16, 0x7, 0x23, 0x1, 0xD9, 0x7, 0xE5, 0x6, 0x3A, 0x2, 0x2A, 0x6, 0x5C, 0x6, 0x7E, 0x3, 0xC5, 0x5, 0x38, 0x7, 0x2E, 0x4, 0xFE, 0x5, 0xEF, 0x2, 0x2C, 0x5, 0xD5, 0x0, 0x4B, 0x0, 0x7A, 0x0, 0x1B, 0x5, 0x55, 0x1, 0xAC, 0x4, 0x88, 0x4, 0x37, 0x6, 0xDE, 0x2, 0x1F, 0x1, 0xAD, 0x6, 0xA3, 0x7, 0xFF, 0x4, 0xF3, 0x5, 0x8, 0x1, 0xF0, 0x5, 0xDC, 0x6, 0xE9, 0x6, 0xD5, 0x5, 0xD3, 0x1, 0x13, 0x7, 0x19, 0x1, 0x58, 0x4, 0x6A, 0x4, 0xD9, 0x2, 0x29, 0x7, 0x81, 0x4, 0x73, 0x2, 0x8B, 0x5, 0x8C, 0x3, 0xD4, 0x1, 0x1F, 0x7, 0x62, 0x0, 0x98, 0x0, 0x92, 0x0, 0x8A, 0x5, 0x0, 0x4, 0x8B, 0x6, 0x58, 0x5, 0x81, 0x2, 0x86, 0x4, 0x8B, 0x7, 0xC7, 0x6, 0x29, 0x1, 0xE4, 0x7, 0xD0, 0x2, 0xF6, 0x6, 0xFE, 0x3, 0x89, 0x5, 0x18, 0x1, 0x7E, 0x0, 0x19, 0x5, 0x8, 0x4, 0x46, 0x7, 0xBF, 0x3, 0xFB, 0x3, 0x3B, 0x5, 0x1D, 0x4, 0x5F, 0x3, 0xB1, 0x7, 0x63, 0x3, 0x57, 0x2, 0x2E, 0x5, 0x0, 0x2, 0x5A, 0x1, 0xFF, 0x1, 0xAC, 0x7, 0xA6, 0x6, 0xD5, 0x3, 0xD0, 0x0, 0xF3, 0x4, 0xF5, 0x3, 0x8D, 0x3, 0x83, 0x3, 0xDE, 0x5, 0xFE, 0x6, 0x9C, 0x4, 0x90, 0x3, 0xE5, 0x7, 0x36, 0x4, 0xD0, 0x5, 0x49, 0x2, 0xE3, 0x6, 0x69, 0x1, 0x7F, 0x1, 0xCC, 0x5, 0x16, 0x3, 0xC2, 0x3, 0xEB, 0x0, 0xA8, 0x2, 0x4E, 0x4, 0x88, 0x3, 0x7D, 0x1, 0x0, 0x7, 0xD1, 0x6, 0x63, 0x7, 0x47, 0x7, 0x91, 0x7, 0x93, 0x7, 0x32, 0x5, 0xF1, 0x7, 0x1A, 0x0, 0x72, 0x6, 0x1E, 0x1, 0x34, 0x5, 0xE6, 0x0, 0xB3, 0x6, 0xB2, 0x7, 0x40, 0x1, 0x99, 0x2, 0x58, 0x7, 0x77, 0x3, 0x7C, 0x5, 0x74, 0x0, 0x82, 0x4, 0xE7, 0x7, 0x35, 0x1, 0x7F, 0x2, 0x4, 0x5, 0xEA, 0x6, 0x6B, 0x7, 0x32, 0x7, 0xC1, 0x3, 0xE1, 0x0, 0x99, 0x0]);

/**
 * Deobfuscates a client packet header, and returns the result if successful.
 * The deobfuscation is done by XORing the first 5 bytes of the packet with the corresponding values from the lookup tables.
 * The lookup index is determined by the packet index, and the lookup table to use is determined by the packet header.
 * The function returns undefined if the deobfuscation fails.
 * @param packetData The packet data to deobfuscate.
 * @param packetIndex The packet index to use for determining the lookup index.
 * @returns The deobfuscated packet header, or undefined if the deobfuscation fails.
 */
export function deobfuscateClientPacketHeader(packetData: Buffer<ArrayBuffer>, packetIndex: number): Buffer | undefined
{
    let packetHeader = packetData.readUInt32LE(0);
    let xorByte = packetData.readUint8(4);

    packetIndex &= 0x1FF;

    let transformedBits = ((packetHeader & 0x38) << 2 | xorByte & 0x1C) * 2;
    let maskedBits = (packetHeader >> 3) & 0x1800000;

    let extractedBits = Buffer.alloc(4);
    extractedBits.writeUIntLE((((transformedBits | (packetHeader & 0xE00)) << 11) & 0xFFFFFF) | (maskedBits & 0xFFFFFF), 1, 3);
    let headerChecksum = maskedBits >> 24;

    let lookupIndex = lookupIndexTable.readUInt16LE(packetIndex * 2) & 0x7FF;

    packetIndex += 1;

    if(lookupIndex != ((transformedBits | packetHeader & 0xe00) << 0xb | maskedBits) >> 0xe)
    {
        console.error("Lookup index mismatch", packetIndex, lookupIndex, ((transformedBits | packetHeader & 0xe00) << 0xb | maskedBits) >> 0xe);
        return undefined;
    }

    let xorLoopCounter = 5;
    for (let i = 0; i < xorLoopCounter; i++)
    {
        packetData[i] ^= HevaServer.lookupTables[i][lookupIndex << 2];
    }

    packetHeader = packetData.readUInt32LE(0);
    packetHeader = (packetHeader >> 2 & 0xe00000 | packetHeader & 0x1c0000) >> 9 | packetHeader & 0x1c0;
    maskedBits = packetData.readUint8(4) << 4;
    transformedBits = packetHeader >> 6;
    
    extractedBits.writeUIntLE(((packetHeader >> 0xe) & 0xFFFFFF) | ((maskedBits >> 8) & 0xFFFFFF) & 0xfffffe | extractedBits.readUIntLE(1, 3), 1, 3);

    packetHeader = packetData.readUInt32LE(0);
    lookupIndex = (((packetData[4] & 3) << 0xb | packetHeader & 0xffff8000) << 8 | packetHeader & 0x600000) << 6;
    headerChecksum = ((lookupIndex >> 24) & 0xFF) | headerChecksum;

    maskedBits = transformedBits | maskedBits & 0xe00;
    extractedBits.writeUIntLE(transformedBits, 0, 1);

    if (((maskedBits < 0x1001) && (5 < maskedBits - (lookupIndex >>> 29))) && (((packetIndex + (lookupIndex >>> 29) ^ lookupIndex >>> 25) & 0xF) == 0))
    {
        packetData.writeUInt32LE(((packetHeader >> 10 & 0x3C0000) | ((packetHeader & 7) << 15) | extractedBits.readUInt32LE(0) | (packetHeader & 0x7000)) >>> 0, 0);
        packetData.writeUInt8(headerChecksum, 4);

        return packetData;
    }

    console.error("Failed to deobfuscate packet header");
    return undefined;
}

/**
 * Deobfuscates a client packet using the provided lookup tables and validation table.
 * The deobfuscation involves an XOR operation on the packet data with values from
 * the lookup tables and validation table to restore the original packet.
 * 
 * @param packetData - The obfuscated packet data represented as a Buffer.
 * @returns The deobfuscated packet as a Buffer if successful, or undefined if deobfuscation fails.
 */
export function deobfuscateClientPacket(packetData: Buffer<ArrayBuffer>)
{
    let deobfuscatedPacket = Buffer.alloc(packetData.length);

    let packetHeader = packetData.readUInt32LE(0);
    let maskedHeader = packetData.readUInt32LE(1);
    let packetSize = (packetData.readUInt16LE(0) & 0xFFF);
    let extractedValue = packetSize - (maskedHeader >>> 29);

    let xorByte = 0;
    let rollingXor = 0;

    let lookupTableIndex = maskedHeader >> 14 & 0x7FF;

    for (let i = 0; i < 5; i++)
    {
        let xorByte = HevaServer.validationTable[packetData[i] ^ rollingXor];
        rollingXor = xorByte;
    }

    if(extractedValue > 6)
    {
        let remainingBytes = (extractedValue & 0xffff) - 6 & 0xffff;
        let currentByte = 6;

        let cursor = 0;
        do 
        {
            const offset = currentByte + (lookupTableIndex - cursor) + ((maskedHeader >> 25 & 0xf) - lookupTableIndex);

            const lookupIndex = ((currentByte + (lookupTableIndex - cursor)) & 0x7ff) * 4;
            const tablePos = offset & 0xf;

            deobfuscatedPacket[currentByte] = packetData[currentByte] ^ HevaServer.lookupTables[tablePos][lookupIndex];
            
            xorByte = HevaServer.validationTable[deobfuscatedPacket[currentByte] ^ rollingXor];
            rollingXor = xorByte;
            
            currentByte++;
            remainingBytes--;
        } while (remainingBytes != 0);
    }

    if(xorByte == packetData[5])
    {
        deobfuscatedPacket.writeUInt16LE(((packetHeader >> 0xc) & 0xFFFF) & 0x3ff, 2);
        deobfuscatedPacket.writeInt16LE(extractedValue, 0);

        return deobfuscatedPacket;
    }

    return undefined;
}

/**
 * Obfuscates a server packet using the provided lookup tables and validation table.
 * The obfuscation process involves generating random values, extracting packet size and second field,
 * and performing a two-phase XOR operation on the packet data to produce the obfuscated packet.
 * @param packetData - The server packet data represented as a Buffer.
 * @returns The obfuscated packet as a Buffer if successful, or 0 if obfuscation fails.
 */
export function obfuscateServerPacket(packetData: Buffer<ArrayBuffer>)
{
    // Generate random values similar to rand() % 512 and rand() % 16
    const randomBits = Math.floor(Math.random() * 512);
    const randomShifted = Math.floor(Math.random() * 16);
    
    // Extract packet size from first 2 bytes
    const packetSize = packetData.readUInt16LE(0);

    // Extract second field from next 2 bytes
    const secondField = packetData.readUInt16LE(2);

    // Check if packet size and second field are within valid ranges
    if (secondField > 0x3FF || packetSize > 4095) {
        return 0;
    }

    const tempBuffer = Buffer.alloc(5);
    tempBuffer.writeUInt32LE(0, 0); // Initialize with 0 to ensure clean state

    // Set up the transformed header value in v23 (tempBuffer) as in the original code
    // This is the direct translation of: *(_DWORD *)&v23[1] = *(_WORD *)&v23[1] & 0x3FFF | ((v2 + v3) << 29) | ((v2 & 0x7FF | ((v3 & 0xF) << 11)) << 14);
    const lookupOffset = ((randomShifted & 0xF) << 11 | randomBits & 0x7FF) << 14;
    const headerChecksum = ((randomShifted + randomBits) & 0xF) << 29;
    let headerValue = (tempBuffer.readUInt32LE(1) & 0x3FFF) | headerChecksum | lookupOffset;
    tempBuffer.writeUInt32LE(headerValue >>> 0, 1);

    // This is the direct translation of: v7 = *(_DWORD *)v23 & 0xFFC00000 | v4 & 0xFFF | ((v5 & 0x3FF) << 12);
    // Where v7 is transformedHeader, v4 is packetSize, v5 is secondField
    const transformedHeader = (tempBuffer.readUInt32LE(0) & 0xFFC00000) | (packetSize & 0xFFF) | ((secondField & 0x3FF) << 12);

    tempBuffer.writeUInt32LE(transformedHeader >>> 0, 0);

    // Update the 5th byte (at index 4) - translated from *(_BYTE *)(a2 + 4) = *(_BYTE *)(a2 + 4) & 0xE0 | (4 * (v7 & 7)) | (*(_DWORD *)&v23[1] >> 27) & 3;
    packetData[4] = (packetData[4] & 0xE0) | ((transformedHeader  & 7) << 2) | ((headerValue >> 27) & 3);
    
    // Calculate a complex value for the first 4 bytes
    const complexValue = (packetData.readUInt32LE(0) & 0xC70038) | 
                         ((transformedHeader & 0x38 | 
                          ((transformedHeader & 0x3C0000 | (headerValue >> 7) & 0x1C00000) >> 9)) >> 3) | 
                         (4 * ((headerValue & 0x6000000) | 
                          (4 * (transformedHeader & 0x38000 | 
                           (8 * (transformedHeader & 0x1C0 | 
                            (32 * (transformedHeader & 0x7000 | 
                             ((transformedHeader & 0xFFFFFE00) << 8)))))))));
    
    // Update the first 4 bytes
    packetData.writeUInt32LE(complexValue >>> 0, 0);

    // First phase of encryption - first 5 bytes
    let rollingXor = 0;
    for (let i = 0; i < 5; i++) {
        // Using a predefined XOR table
        rollingXor = HevaServer.validationTable[rollingXor ^ packetData[i]];

        // XOR with value from lookup table - using randomBits << 2 as in your current code
        packetData[i] ^= HevaServer.lookupTables[i][randomBits << 2];
    }

    // Second phase of encryption - remaining bytes
    if (packetSize > 6)
    {
        let remainingBytes = packetSize - 6 & 0xffff;
        let currentByte = 6;

        do 
        {
            // Update rolling XOR
            rollingXor = HevaServer.validationTable[rollingXor ^ packetData[currentByte]];
            
            // Complex XOR operation
            const lookupIndex = (currentByte + (randomBits - 0) + (randomShifted & 0x8000000f) - randomBits) & 0xF;
            const offsetIndex = (currentByte + (randomBits - 0)) & 0x7FF;

            packetData[currentByte] ^= HevaServer.lookupTables[lookupIndex][offsetIndex << 2];

            currentByte++;
            remainingBytes--;
        } while (remainingBytes != 0)
    }
    
    // Final updates to the packet header
    packetData[4] = (packetData[4] & 0x1F) | ((headerValue >> 17) << 5);
    
    const finalComplexValue = (packetData.readUInt32LE(0) & 0xFF38FFC7) | 
                             ((headerValue & 0x1800000 | 
                              (((0x700000) & headerValue | 
                               (headerValue >> 7) & 0x380) >> 3)) >> 1);
    
    packetData.writeUInt32LE(finalComplexValue >>> 0, 0);
    packetData[5] = rollingXor;

    // something is going very wrong with the xor so we calculate a new one

    packetData[5] = xorWorkaround(packetData);

    return packetData;
}

/**
 * Applies a workaround XOR transformation to an obfuscated packet.
 * The function first copies and transforms the raw header and calculates
 * a final validation byte. It then performs a 5-byte XOR transformation
 * using lookup values from the server's lookup tables. If the packet size
 * exceeds 6, it continues processing the remaining bytes using a rolling
 * XOR transformation. The function ultimately returns the final rolling
 * XOR value.
 *
 * @param obfuscatedPacket - The packet data to apply the XOR workaround on.
 * @returns The final rolling XOR value after processing the packet.
 */

function xorWorkaround(obfuscatedPacket: Buffer)
{
    let packetData = Buffer.alloc(obfuscatedPacket.length);
    obfuscatedPacket.copy(packetData, 0);

    let rawHeader = packetData.readUInt32LE(0);
    let transformedRawHeader = ((((packetData[4] & 0xffffe0e0) << 1 | rawHeader & 0x38) << 7 | rawHeader & 0x70000) << 3 | rawHeader & 0xC00000) << 1;
    let finalValidationByte = (transformedRawHeader >> 24) & 0xFF;

    let xorIndex = 0;

    do
    {
        let lookupValue = HevaServer.lookupTables[xorIndex][(transformedRawHeader >> 14) << 2];

        packetData[xorIndex] ^= lookupValue;
        xorIndex++;
    } while (xorIndex < 5);

    let transformedHeader = packetData.readUInt32LE(0);
    let maskedField = transformedHeader >> 13 & 0x70000 | transformedHeader & 0xE000;
    let sizeField = (((maskedField >> 5) | (packetData[4] & 0x1C)) >> 2) | ((transformedHeader & 7) << 3);

    let decodedHeaderFields = Buffer.alloc(4); // 4-byte buffer
    decodedHeaderFields.writeUIntLE(((maskedField >> 15) | transformedRawHeader) & 0xFFFFFF, 1, 3); // Ensure only 3 bytes

    let validationByte2 = (((packetData[4] & 3) << 8 | transformedHeader & 0xFFFFFC00) << 19) >>> 24;
    let validationByte1 = validationByte2 | (transformedHeader >> 26) & 6;
    finalValidationByte = validationByte1 | finalValidationByte;

    decodedHeaderFields.writeUInt8(sizeField & 0xFF, 0); // First byte is the packet size

    let newHeader = (transformedHeader >> 8 & 0x70000 | transformedHeader & 0x380000) >> 4 |
    (transformedHeader & 0x3C0) << 12 | decodedHeaderFields.readUInt32LE(0);

    packetData.writeUInt32LE(newHeader, 0);
    packetData[4] = finalValidationByte;

    let packetCursor = packetData;
    transformedHeader = packetCursor.readUInt32LE(1);
    rawHeader = packetCursor.readUInt32LE(0);
    let lookupTableIndex = (transformedHeader >> 14) & 0x7FF;
    let packetSize = packetCursor.readUInt16LE(0) & 0xFFF;
    let rollingXor = 0;

    // First 5-byte XOR transformation
    for (let i = 0; i < 5; i++) {
        let xorByte = HevaServer.validationTable[packetCursor[i] ^ rollingXor];
        rollingXor = xorByte;
    }

    // If packet size > 6, process the rest
    if (packetSize > 6) {
        let remainingBytes = packetSize - 6;
        let currentByte = 6;

        let cursor = 0;

        while (remainingBytes > 0) {
            // Calculate the byte and lookup indices
            const offset = currentByte + (lookupTableIndex - cursor) + ((transformedHeader >> 25 & 0xf) - lookupTableIndex);

            const lookupIndex = ((currentByte + (lookupTableIndex - cursor)) & 0x7ff) * 4;
            const tablePos = offset & 0xf;

            // Apply XOR transformation using the lookup table
            packetCursor[currentByte] ^= HevaServer.lookupTables[tablePos][lookupIndex];

            let xorByte = HevaServer.validationTable[packetCursor[currentByte] ^ rollingXor];
            rollingXor = xorByte;
            currentByte += 1;
            remainingBytes -= 1;
        }
    }

    return rollingXor;
}

export async function readTables()
{
    const fileStream = fs.createReadStream('./src/res/lookupTables.txt');

    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity
    });

    let tables = [];

    let tableIndex = 0;
    for await (const line of rl) {
        if(line == "")
            continue;

        if(line.startsWith("Table"))
        {
            let split = line.split(" ");
            tableIndex = Number(split[1].substring(0, split[1].length - 1));

            tables.push(new Array<number>());
        }

        if(line.startsWith("  Index"))
        {
            let split = line.split(" ");

            let lineIndex = Number(split[3].substring(0, split[3].length - 1));
            let hex = split[8].substring(2, split[8].length);

            let hex1 = hex.substring(0, 2);
            let hex2 = hex.substring(2, 4);
            let hex3 = hex.substring(4, 6);
            let hex4 = hex.substring(6, 8);

            tables[tableIndex].push(Number.parseInt(hex4, 16));
            tables[tableIndex].push(Number.parseInt(hex3, 16));
            tables[tableIndex].push(Number.parseInt(hex2, 16));
            tables[tableIndex].push(Number.parseInt(hex1, 16));
        }
    }

    return tables;
}

export async function readTable2()
{
    const fileStream = fs.createReadStream('./src/res/table2.txt');

    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity
    });

    let table = [];

    for await (const line of rl) {
        table.push(Number.parseInt(line, 16));
    }

    return table;
}

export async function readTable3()
{
    const fileStream = fs.createReadStream('./src/res/something.txt');

    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity
    });

    let table = [];

    for await (const line of rl) {
        table.push(Number.parseInt(line, 16));
    }

    return Buffer.from(table);
}