const fs = require('fs');
const readline = require('readline');

const lookupIndexTable = Buffer.from([0xCD, 0x4, 0xAD, 0x0, 0x49, 0x0, 0x82, 0x5, 0xF2, 0x5, 0x1E, 0x3, 0xE4, 0x5, 0x3E, 0x1, 0xE0, 0x2, 0xEF, 0x1, 0x92, 0x4, 0x62, 0x6, 0x9, 0x7, 0xC6, 0x1, 0xC4, 0x4, 0x18, 0x5, 0xED, 0x0, 0x9C, 0x7, 0x85, 0x5, 0x7C, 0x7, 0xBC, 0x5, 0xC6, 0x2, 0xAE, 0x6, 0xBE, 0x4, 0x2C, 0x1, 0x43, 0x4, 0x67, 0x5, 0xA0, 0x7, 0x96, 0x5, 0x45, 0x7, 0xE4, 0x6, 0xA, 0x4, 0x55, 0x0, 0x1, 0x7, 0x5E, 0x5, 0xF, 0x0, 0x60, 0x6, 0x50, 0x3, 0x7, 0x4, 0x26, 0x5, 0x11, 0x1, 0xF3, 0x0, 0x1, 0x6, 0xAB, 0x3, 0x7F, 0x7, 0xFF, 0x7, 0x74, 0x4, 0xE3, 0x7, 0x37, 0x3, 0x99, 0x1, 0x22, 0x4, 0x4C, 0x4, 0x2D, 0x6, 0xA1, 0x2, 0x48, 0x5, 0xCF, 0x1, 0x54, 0x3, 0x1F, 0x2, 0xD, 0x4, 0xD8, 0x1, 0x3F, 0x1, 0xB, 0x6, 0x28, 0x0, 0xB6, 0x4, 0x3D, 0x2, 0xD6, 0x7, 0x2E, 0x0, 0x80, 0x3, 0xB6, 0x5, 0xF5, 0x1, 0x65, 0x2, 0x49, 0x7, 0x10, 0x2, 0x82, 0x3, 0xEE, 0x4, 0x91, 0x0, 0x41, 0x1, 0x3B, 0x4, 0x2D, 0x4, 0xC0, 0x1, 0x93, 0x5, 0x8E, 0x6, 0xF8, 0x6, 0x64, 0x2, 0xEA, 0x7, 0xC1, 0x6, 0x66, 0x2, 0x6C, 0x2, 0x2D, 0x0, 0x66, 0x5, 0xF8, 0x5, 0xBF, 0x6, 0x16, 0x4, 0xFD, 0x0, 0xEA, 0x3, 0xB, 0x3, 0x22, 0x0, 0xED, 0x2, 0xD7, 0x1, 0xC0, 0x4, 0xCF, 0x6, 0xA0, 0x3, 0x94, 0x5, 0x74, 0x3, 0x1E, 0x2, 0xF9, 0x1, 0x47, 0x2, 0x56, 0x2, 0x44, 0x3, 0x4, 0x2, 0xC7, 0x1, 0x11, 0x7, 0xAF, 0x4, 0xD7, 0x6, 0x3B, 0x6, 0xC3, 0x1, 0x41, 0x2, 0xC3, 0x3, 0xEB, 0x7, 0x5D, 0x2, 0xC8, 0x3, 0xC3, 0x0, 0x6A, 0x3, 0x20, 0x7, 0xBE, 0x5, 0x22, 0x6, 0xE8, 0x3, 0x6D, 0x0, 0x41, 0x4, 0x6E, 0x3, 0xD1, 0x5, 0xD8, 0x5, 0x53, 0x4, 0x9F, 0x5, 0xAB, 0x5, 0x66, 0x0, 0x54, 0x7, 0x82, 0x0, 0x30, 0x7, 0x27, 0x6, 0xBF, 0x4, 0x6A, 0x7, 0xA8, 0x0, 0xFF, 0x2, 0x21, 0x6, 0x17, 0x1, 0x89, 0x6, 0xA6, 0x2, 0x60, 0x1, 0xE5, 0x2, 0x52, 0x3, 0x5, 0x0, 0x29, 0x5, 0x3A, 0x7, 0xA6, 0x7, 0xB8, 0x5, 0xBB, 0x3, 0x2D, 0x3, 0xA7, 0x6, 0xDB, 0x3, 0xD4, 0x7, 0x72, 0x7, 0x92, 0x2, 0x1B, 0x7, 0xFA, 0x7, 0x8A, 0x0, 0xA1, 0x5, 0xF7, 0x4, 0xEE, 0x3, 0x31, 0x2, 0x5C, 0x1, 0x6B, 0x0, 0x1, 0x2, 0xC5, 0x4, 0x63, 0x1, 0x24, 0x5, 0x63, 0x5, 0x5D, 0x0, 0x60, 0x7, 0xFC, 0x0, 0x96, 0x1, 0x39, 0x4, 0x89, 0x0, 0xE7, 0x5, 0x27, 0x4, 0xE0, 0x1, 0xC5, 0x2, 0xB7, 0x7, 0x20, 0x2, 0x13, 0x0, 0xE, 0x1, 0x97, 0x2, 0xE4, 0x4, 0x70, 0x4, 0x3, 0x4, 0x20, 0x6, 0x8C, 0x1, 0x4D, 0x5, 0x0, 0x5, 0x62, 0x3, 0x19, 0x6, 0x15, 0x2, 0xEC, 0x0, 0xD7, 0x7, 0x4E, 0x6, 0xCF, 0x0, 0xED, 0x5, 0xAF, 0x3, 0xD0, 0x3, 0x1C, 0x6, 0xE0, 0x5, 0x61, 0x6, 0xED, 0x6, 0x92, 0x3, 0x57, 0x7, 0x4C, 0x0, 0x36, 0x0, 0x36, 0x6, 0x5E, 0x6, 0x52, 0x4, 0x8A, 0x7, 0x90, 0x4, 0x89, 0x7, 0x10, 0x5, 0x5E, 0x4, 0x23, 0x0, 0x67, 0x7, 0xF2, 0x1, 0x50, 0x7, 0x35, 0x5, 0x27, 0x1, 0x9A, 0x0, 0xEE, 0x0, 0x87, 0x0, 0x73, 0x6, 0xC2, 0x1, 0x91, 0x4, 0x3, 0x3, 0x92, 0x6, 0xA5, 0x7, 0xD0, 0x7, 0xDC, 0x2, 0xA6, 0x1, 0x23, 0x7, 0xD4, 0x0, 0x73, 0x7, 0x76, 0x1, 0x40, 0x2, 0x64, 0x3, 0xCC, 0x0, 0x77, 0x6, 0xE0, 0x0, 0x32, 0x0, 0x1E, 0x5, 0xC6, 0x7, 0xBE, 0x0, 0xC2, 0x7, 0xE6, 0x4, 0x42, 0x4, 0xC4, 0x5, 0xB6, 0x7, 0x8E, 0x3, 0xA7, 0x7, 0x19, 0x0, 0xFA, 0x3, 0x99, 0x4, 0x3A, 0x3, 0x8C, 0x4, 0x13, 0x2, 0xE9, 0x5, 0x20, 0x5, 0x5B, 0x1, 0x9B, 0x0, 0xDB, 0x6, 0x5, 0x5, 0x72, 0x0, 0xD7, 0x2, 0xCE, 0x0, 0x4E, 0x2, 0x5D, 0x5, 0x9E, 0x3, 0x64, 0x0, 0x81, 0x0, 0x82, 0x2, 0xF0, 0x6, 0x5F, 0x7, 0x3A, 0x4, 0x9, 0x5, 0x72, 0x4, 0x27, 0x5, 0x2, 0x1, 0x40, 0x4, 0xAA, 0x3, 0xC2, 0x2, 0x49, 0x5, 0xA0, 0x6, 0x61, 0x3, 0x4A, 0x2, 0x80, 0x4, 0x25, 0x2, 0xF4, 0x0, 0xC6, 0x3, 0xB2, 0x0, 0xAD, 0x2, 0x25, 0x0, 0x23, 0x4, 0x65, 0x5, 0x8E, 0x0, 0x1C, 0x4, 0x69, 0x2, 0xD0, 0x1, 0x7D, 0x3, 0xC0, 0x5, 0x4A, 0x7, 0x3D, 0x6, 0x9D, 0x5, 0x3D, 0x3, 0xB7, 0x0, 0x3E, 0x4, 0xFD, 0x4, 0xB5, 0x0, 0xCC, 0x2, 0x9F, 0x0, 0xA9, 0x3, 0xB8, 0x1, 0xFA, 0x0, 0xE4, 0x2, 0x97, 0x4, 0xFB, 0x1, 0x11, 0x3, 0x9C, 0x0, 0x51, 0x7, 0x87, 0x6, 0x3, 0x6, 0x6D, 0x6, 0xA6, 0x5, 0xF7, 0x6, 0xC2, 0x6, 0xD, 0x1, 0xCC, 0x7, 0xC3, 0x6, 0xD3, 0x3, 0x90, 0x0, 0xFD, 0x2, 0xAE, 0x4, 0xF6, 0x7, 0xCE, 0x1, 0xAF, 0x2, 0x35, 0x0, 0x96, 0x7, 0x7E, 0x5, 0x4B, 0x1, 0x51, 0x2, 0x7C, 0x1, 0x30, 0x6, 0xE7, 0x6, 0xCB, 0x2, 0x97, 0x1, 0x7E, 0x4, 0xDE, 0x7, 0xB0, 0x5, 0xC7, 0x0, 0x45, 0x3, 0x61, 0x1, 0x28, 0x5, 0x39, 0x2, 0xD0, 0x6, 0xCD, 0x3, 0x91, 0x3, 0xBF, 0x1, 0xEF, 0x5, 0x45, 0x0, 0xE3, 0x4, 0x16, 0x7, 0x23, 0x1, 0xD9, 0x7, 0xE5, 0x6, 0x3A, 0x2, 0x2A, 0x6, 0x5C, 0x6, 0x7E, 0x3, 0xC5, 0x5, 0x38, 0x7, 0x2E, 0x4, 0xFE, 0x5, 0xEF, 0x2, 0x2C, 0x5, 0xD5, 0x0, 0x4B, 0x0, 0x7A, 0x0, 0x1B, 0x5, 0x55, 0x1, 0xAC, 0x4, 0x88, 0x4, 0x37, 0x6, 0xDE, 0x2, 0x1F, 0x1, 0xAD, 0x6, 0xA3, 0x7, 0xFF, 0x4, 0xF3, 0x5, 0x8, 0x1, 0xF0, 0x5, 0xDC, 0x6, 0xE9, 0x6, 0xD5, 0x5, 0xD3, 0x1, 0x13, 0x7, 0x19, 0x1, 0x58, 0x4, 0x6A, 0x4, 0xD9, 0x2, 0x29, 0x7, 0x81, 0x4, 0x73, 0x2, 0x8B, 0x5, 0x8C, 0x3, 0xD4, 0x1, 0x1F, 0x7, 0x62, 0x0, 0x98, 0x0, 0x92, 0x0, 0x8A, 0x5, 0x0, 0x4, 0x8B, 0x6, 0x58, 0x5, 0x81, 0x2, 0x86, 0x4, 0x8B, 0x7, 0xC7, 0x6, 0x29, 0x1, 0xE4, 0x7, 0xD0, 0x2, 0xF6, 0x6, 0xFE, 0x3, 0x89, 0x5, 0x18, 0x1, 0x7E, 0x0, 0x19, 0x5, 0x8, 0x4, 0x46, 0x7, 0xBF, 0x3, 0xFB, 0x3, 0x3B, 0x5, 0x1D, 0x4, 0x5F, 0x3, 0xB1, 0x7, 0x63, 0x3, 0x57, 0x2, 0x2E, 0x5, 0x0, 0x2, 0x5A, 0x1, 0xFF, 0x1, 0xAC, 0x7, 0xA6, 0x6, 0xD5, 0x3, 0xD0, 0x0, 0xF3, 0x4, 0xF5, 0x3, 0x8D, 0x3, 0x83, 0x3, 0xDE, 0x5, 0xFE, 0x6, 0x9C, 0x4, 0x90, 0x3, 0xE5, 0x7, 0x36, 0x4, 0xD0, 0x5, 0x49, 0x2, 0xE3, 0x6, 0x69, 0x1, 0x7F, 0x1, 0xCC, 0x5, 0x16, 0x3, 0xC2, 0x3, 0xEB, 0x0, 0xA8, 0x2, 0x4E, 0x4, 0x88, 0x3, 0x7D, 0x1, 0x0, 0x7, 0xD1, 0x6, 0x63, 0x7, 0x47, 0x7, 0x91, 0x7, 0x93, 0x7, 0x32, 0x5, 0xF1, 0x7, 0x1A, 0x0, 0x72, 0x6, 0x1E, 0x1, 0x34, 0x5, 0xE6, 0x0, 0xB3, 0x6, 0xB2, 0x7, 0x40, 0x1, 0x99, 0x2, 0x58, 0x7, 0x77, 0x3, 0x7C, 0x5, 0x74, 0x0, 0x82, 0x4, 0xE7, 0x7, 0x35, 0x1, 0x7F, 0x2, 0x4, 0x5, 0xEA, 0x6, 0x6B, 0x7, 0x32, 0x7, 0xC1, 0x3, 0xE1, 0x0, 0x99, 0x0]);

export function encryptPacketInternal(lookupTables: number[][], table2: number[], packetData: Buffer<ArrayBuffer>, packetIndex: number) {
    console.log(packetData)
    let packetSize = packetData.readUInt16LE(0);
    let randomizedHeader = 0;

    if ((0x1000 - packetSize) < 7) {
        randomizedHeader = 0;
    } else {
        let randomValue = Math.floor(Math.random() * 8);
        randomizedHeader = -1140818135 >>> 0;
    }

    packetIndex &= 0x1FF;
    let lookupTableIndex = lookupIndexTable.readUInt16LE(packetIndex); 
    packetIndex += 1;

    console.log(lookupTableIndex)

    let encryptionSeed = (packetIndex + (randomizedHeader >>> 29)) & 0xf;

    let xorByte = ((encryptionSeed << 11 | lookupTableIndex & 0x7ff) << 14) >> 0x18;
    let validationByte = xorByte | (randomizedHeader >> 0x18);

    console.log(randomizedHeader, lookupTableIndex, encryptionSeed);
    let transformedHeader = (randomizedHeader & 0xE0003FFF) | (((lookupTableIndex & 0x7FF) | (encryptionSeed << 11)) << 14);

    let updatedPacketIndex = (packetData.readUInt16LE(0) + ((transformedHeader >>> 29) & 7)) & 0xFFFF;
    
    let packetBodySize = (transformedHeader & 0xFFC00000) | (updatedPacketIndex & 0xFFF) | ((packetData.readUInt16LE(2) & 0x3FF) << 12);  

    transformedHeader = (transformedHeader & 0xFFC00000) | (updatedPacketIndex & 0xFFF) | packetBodySize;
    
    packetData[4] = (((transformedHeader >>> 25) & 3) ^ (packetData[4] & 0x1C)) | ((packetBodySize >>> 9) & 0xE0);

    console.log(packetData, "expected: 0e 00 03 00 02 00 07 09 11 00 e8 03");
    
    let rollingXor = 0;
    let lookupOffset = 0;

    packetData.writeUInt32LE(
        (packetData.readUInt32LE(0) & 0xC000E38) |
        ((transformedHeader >>> 14) & 0x38000) |
        (packetBodySize & 0x7000) |
        (((transformedHeader & 0x18000000) | ((packetBodySize >>> 9) & 0x1C0)) >>> 6) |
        (((packetBodySize & 7) | (16 * ((packetBodySize & 0xFFFC0000) | (32 * ((packetBodySize & 0x38) | (4 * (packetBodySize & 0x1C0))))))) << 6),
        0
    );

    console.log(packetData, "expected: C8 B0 2A 00 02 00 07 09 11 00 E8 03");

    let xorLoopCounter = 5;
    for (let i = 0; i < xorLoopCounter; i++) {
        xorByte = table2[packetData[transformedHeader - packetData.readInt32LE(0)] ^ rollingXor];
        rollingXor = xorByte;
        packetData[i] ^= lookupTables[lookupOffset][lookupTableIndex * 4];
        lookupOffset += 1;
    }

    // Expected value: 

    console.log(packetData, "expected: 8C F4 6E 25 1E 00 07 09 11 00 E8 03");
}

export function deobfuscatePacketHeader(lookupTables: number[][], packetData: Buffer<ArrayBuffer>)
{
    let rawHeader = packetData.readUInt32LE(0);
    let transformedRawHeader = ((((packetData[4] & 0xE0) << 1 | rawHeader & 0x38) << 7 | rawHeader & 0x70000) << 3 | rawHeader & 0xC00000) << 1;
    let finalValidationByte = (transformedRawHeader >> 24) & 0xFF;

    console.log("rawHeader", rawHeader.toString(16));
    console.log("transformedRawHeader", transformedRawHeader.toString(16));
    console.log("finalValidationByte", finalValidationByte.toString(16));

    let xorIndex = 0;

    console.log("First 4 bytes before XOR:", packetData.slice(0, 5));

    do
    {
        let lookupValue = lookupTables[xorIndex][(transformedRawHeader >> 14) * 4];

        console.log(
            `XOR Index: ${xorIndex}, Original Byte: ${packetData[xorIndex].toString(16)}, Lookup Value: ${lookupValue.toString(16)}, byteShift: ${(transformedRawHeader >> 14) * 4} | ${transformedRawHeader >> 14}`
        );

        packetData[xorIndex] ^= lookupValue;
        xorIndex++;
    } while (xorIndex < 5);

    console.log("First 4 bytes after XOR:", packetData.slice(0, 5));

    let transformedHeader = packetData.readUInt32LE(0);
    let maskedField = transformedHeader >> 13 & 0x70000 | transformedHeader & 0xE000;
    let sizeField = (((maskedField >> 5) | (packetData[4] & 0x1C)) >> 2) | ((transformedHeader & 7) << 3);

    console.log("transformedHeader", transformedHeader.toString(16));
    console.log("maskedField", maskedField.toString(16));
    console.log("sizeField", sizeField.toString(16));

    let decodedHeaderFields = Buffer.alloc(4); // 4-byte buffer
    decodedHeaderFields.writeUIntLE(((maskedField >> 15) | transformedRawHeader) & 0xFFFFFF, 1, 3); // Ensure only 3 bytes

    let validationByte2 = (((packetData[4] & 3) << 8 | transformedHeader & 0xFFFFFC00) << 19) >>> 24;
    let validationByte1 = validationByte2 | (transformedHeader >> 26) & 6;
    finalValidationByte = validationByte1 | finalValidationByte;

    decodedHeaderFields.writeUInt8(sizeField & 0xFF, 0); // First byte is the packet size

    console.log("decodedHeaderFields", decodedHeaderFields.readUInt32LE(0).toString(16));
    console.log("validationByte2", validationByte2.toString(16));
    console.log("validationByte1", validationByte1.toString(16));
    console.log("finalValidationByte", finalValidationByte.toString(16));

    let returnValue = sizeField & 0xFFFF;

    console.log("returnValue", returnValue.toString(16));

    if ((returnValue - 6) < 0xFFB) {
        let concatValue = (finalValidationByte << 24) | decodedHeaderFields.readUIntLE(1, 3);
        let validationCheck = ((validationByte1 >> 1) + ((concatValue >> 14) & 0xFF)) & 7;

        console.log("concatValue", concatValue.toString(16));
        console.log("validationCheck", validationCheck.toString(16));

        console.log("validation check shift", (validationByte2 >> 5).toString(16), validationCheck.toString(16))

        if ((validationByte2 >> 5) === validationCheck) {
            let newHeader = (transformedHeader >> 8 & 0x70000 | transformedHeader & 0x380000) >> 4 |
                (transformedHeader & 0x3C0) << 12 | decodedHeaderFields.readUInt32LE(0);

            console.log("newHeader", newHeader.toString(16));

            packetData.writeUInt32LE(newHeader, 0);
            packetData[4] = finalValidationByte;

            return returnValue;
        }
    }

    return 0;
}

export function deobfuscatePacket(lookupTable: number[][], validationTable: number[], packetData: Buffer): number {
    if (packetData.length < 6) {
        console.log("Invalid packet size");
        return 0;
    }

    let packetCursor = packetData;
    let transformedHeader = packetCursor.readUInt32LE(1);
    let rawHeader = packetCursor.readUInt32LE(0);
    let lookupTableIndex = (transformedHeader >> 14) & 0x7FF;
    let packetSize = packetCursor.readUInt16LE(0) & 0xFFF;
    let rollingXor = 0;

    console.log(transformedHeader.toString(16), lookupTableIndex)

    // First 5-byte XOR transformation
    for (let i = 0; i < 5; i++) {
        let xorByte = validationTable[packetCursor[i] ^ rollingXor];
        rollingXor = xorByte;
    }

    // If packet size > 6, process the rest
    if (packetSize > 6) {
        let remainingBytes = packetSize - 6;
        let currentByte = 6;

        let cursor = 0;

        while (remainingBytes > 0) {
            // Calculate the byte and lookup indices
            const offset = currentByte + (lookupTableIndex - cursor) + ((transformedHeader >> 25 & 0xf) - lookupTableIndex);

            const lookupIndex = ((currentByte + (lookupTableIndex - cursor)) & 0x7ff) * 4;
            const tablePos = offset & 0xf;

            // Apply XOR transformation using the lookup table
            packetCursor[currentByte] ^= lookupTable[tablePos][lookupIndex];

            let xorByte = validationTable[packetCursor[currentByte] ^ rollingXor];
            rollingXor = xorByte;
            currentByte += 1;
            remainingBytes -= 1;
        }
    }

    // Validate packet
    if (rollingXor === packetCursor[5]) {
        let newHeader = ((rawHeader >> 12) & 0x3FF);
        packetCursor.writeUInt16LE(newHeader, 2);
        packetCursor.writeUInt16LE(packetSize, 0);
        console.log("Packet validated, size:", packetSize, newHeader);
        return packetSize;
    } else {
        console.log("Packet validation failed");
        return 0;
    }
}

export function obfuscatePacket(lookupTable: number[][], validationTable: number[],  packetData: Buffer, packetIndex: number)
{
    let packetSize = packetData.length + 6;
    let obfuscatedPacket = Buffer.alloc(packetSize);

    obfuscatedPacket[4] = ((packetSize & 0x7) << 2);
    let transformedHeader = (packetSize >> 3) & 0x7;
    
    const highBits = (packetSize >> 6) & 0x3F;

    transformedHeader |= ((highBits & 0x7) << 13);

    transformedHeader |= ((highBits >> 3) << 29);

    transformedHeader = transformedHeader >>> 0;

    let randomValue = 5;
    let random = (((randomValue << 5) << 24) >>> 19) & 0xD001C00;
    random |= ((randomValue << 5) >> 8) & 0x3;

    transformedHeader &= ~0xd001c00;
    transformedHeader |= random & 0xd001c00;

    obfuscatedPacket.writeUInt32LE(transformedHeader >>> 0, 0);

    obfuscatedPacket[4] &= ~0x3;
    obfuscatedPacket[4] |= random & 0x3;

    let dtransformedHeader = obfuscatedPacket.readUInt32LE(0);
    let dmaskedField = dtransformedHeader >> 13 & 0x70000 | dtransformedHeader & 0xE000;
    let dsizeField = (((dmaskedField >> 5) | (obfuscatedPacket[4] & 0x1C)) >> 2) | ((dtransformedHeader & 7) << 3);

    let validationByte2 = (((obfuscatedPacket[4] & 3) << 8 | dtransformedHeader & 0xFFFFFC00) << 19) >> 24;
    let validationByte1 = validationByte2 | (dtransformedHeader >> 26) & 6;

    let finalValidationByte = validationByte1 | 1;

    let lookupTableIndex = lookupIndexTable.readInt16LE(0) << 2;

    for(let i = 0; i < 5; i++)
        obfuscatedPacket[i] ^= lookupTable[i][lookupTableIndex];

    obfuscateFinalStep(obfuscatedPacket, 0, lookupTableIndex);

    let newHeader = 0x33400000 | dsizeField;

    let bufferToRoll = Buffer.from(obfuscatedPacket);
    bufferToRoll.writeUInt32LE(newHeader, 0);
    bufferToRoll[4] = finalValidationByte;

    transformedHeader = bufferToRoll.readUInt32LE(1);
    lookupTableIndex = (transformedHeader >> 14) & 0x7FF;

    console.log(bufferToRoll, transformedHeader.toString(16), lookupTableIndex)

    let rollingXor = 0;
    for (let i = 0; i < 5; i++) {
        rollingXor = validationTable[bufferToRoll[i] ^ rollingXor];
    }

    if (packetSize > 6) {
        let remainingBytes = packetSize - 6;
        let currentByte = 6;

        let cursor = 0;

        while (remainingBytes > 0) {
            // Calculate the byte and lookup indices
            const offset = currentByte + (lookupTableIndex - cursor) + ((transformedHeader >> 25 & 0xf) - lookupTableIndex);

            const lookupIndex = ((currentByte + (lookupTableIndex - cursor)) & 0x7ff) * 4;
            const tablePos = offset & 0xf;

            // Apply XOR transformation using the lookup table
            obfuscatedPacket[currentByte] = packetData[currentByte - 6] ^ lookupTable[tablePos][lookupIndex];

            let xorByte = validationTable[packetData[currentByte - 6] ^ rollingXor];
            rollingXor = xorByte;
            currentByte += 1;
            remainingBytes -= 1;
        }
    }

    // **Store final Rolling XOR in byte 5**
    obfuscatedPacket[5] = rollingXor;

    console.log(rollingXor)

    return obfuscatedPacket;
}

function obfuscateFinalStep(xoredBuffer: Buffer<ArrayBuffer>, finalValidationByte: number, lookupValue: number)
{
    let rHeader = xoredBuffer.readUInt32LE(0);

    console.log("xored buffer", rHeader.toString(16));

    let step1 = xoredBuffer[4] & 0xE0;          // Extract bits from packetData[4]
    let step2 = step1 << 1;                    // Shift left by 1 (multiply by 2)
    let step3 = rHeader & 0x38;              // Extract bits from rawHeader
    let step4 = step2 | step3;                 // Combine results
    let step5 = step4 << 7;                    // Shift left by 7
    let step6 = rHeader & 0x70000;           // Extract more bits
    let step7 = step5 | step6;                 // Combine results
    let step8 = step7 << 3;                    // Shift left by 3
    let step9 = rHeader & 0xC00000;          // Extract more bits
    let step10 = step8 | step9;                // Combine results
    let result = step10 << 1;    // Final shift left by 1

    // result = transformedHeader

    // inject the XOR index
    const mask = ~(((1 << 14) - 1) << 14);  // This creates a mask with 0s in the bit positions we want to replace
    result = (result & mask) | ((lookupValue >> 2) << 14);

    // reconstruct the header with our new values
    let reversedValue = result;

    // Undo the final left shift by 1
    reversedValue = reversedValue >> 1;

    // Extract the bits that came from rawHeader & 0xC00000
    let rawHeaderPart3 = reversedValue & 0xC00000;

    // Remove those bits from our working value
    let tempValue = reversedValue & ~0xC00000;

    // Undo the left shift by 3
    tempValue = tempValue >> 3;

    // Extract the bits that came from rawHeader & 0x70000
    let rawHeaderPart2 = tempValue & 0x70000;

    // Remove those bits from our working value
    tempValue = tempValue & ~0x70000;

    // Undo the left shift by 7
    tempValue = tempValue >> 7;

    // Extract the bits that came from rawHeader & 0x38
    let rawHeaderPart1 = tempValue & 0x38;

    // Remove those bits from our working value
    tempValue = tempValue & ~0x38;

    // Undo the first left shift by 1
    let packetDataPart = tempValue >> 1;

    // Reconstruct the original values
    let reconstructedPacketData4 = packetDataPart & 0xE0;
    let reconstructedRawHeader = rawHeaderPart1 | rawHeaderPart2 | rawHeaderPart3;

    rHeader &= ~0xc70038;
    rHeader |= reconstructedRawHeader;
    rHeader = rHeader >>> 0;

    xoredBuffer.writeUInt32LE(rHeader, 0);
    xoredBuffer[4] &= ~0xE0;
    xoredBuffer[4] |= reconstructedPacketData4;
}

export async function readTables()
{
    const fileStream = fs.createReadStream('./src/res/lookupTables.txt');

    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity
    });

    let tables = [];

    let tableIndex = 0;
    for await (const line of rl) {
        if(line == "")
            continue;

        if(line.startsWith("Table"))
        {
            let split = line.split(" ");
            tableIndex = Number(split[1].substring(0, split[1].length - 1));

            tables.push(new Array<number>());
        }

        if(line.startsWith("  Index"))
        {
            let split = line.split(" ");

            let lineIndex = Number(split[3].substring(0, split[3].length - 1));
            let hex = split[8].substring(2, split[8].length);

            let hex1 = hex.substring(0, 2);
            let hex2 = hex.substring(2, 4);
            let hex3 = hex.substring(4, 6);
            let hex4 = hex.substring(6, 8);

            tables[tableIndex].push(Number.parseInt(hex4, 16));
            tables[tableIndex].push(Number.parseInt(hex3, 16));
            tables[tableIndex].push(Number.parseInt(hex2, 16));
            tables[tableIndex].push(Number.parseInt(hex1, 16));
        }
    }

    return tables;
}

export async function readTable2()
{
    const fileStream = fs.createReadStream('./src/res/table2.txt');

    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity
    });

    let table = [];

    for await (const line of rl) {
        table.push(Number.parseInt(line, 16));
    }

    return table;
}

export async function readTable3()
{
    const fileStream = fs.createReadStream('./src/res/something.txt');

    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity
    });

    let table = [];

    for await (const line of rl) {
        table.push(Number.parseInt(line, 16));
    }

    return Buffer.from(table);
}